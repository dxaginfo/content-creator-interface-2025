import { WritingStyle, GeneratedContent } from '../types';

const STYLE_PROMPTS = {
  'tim-ferriss': `Write in the style of Tim Ferriss: concise, practical, questioning conventional wisdom, and focused on actionable advice. Include memorable anecdotes and examples, precise language, and system-based approaches. Break down complex topics into digestible pieces.`,
  
  'tim-ferriss-james-clear': `Write in a style that blends Tim Ferriss (80%) and James Clear (20%). From Tim Ferriss: use concise, practical advice that questions conventional wisdom. From James Clear: incorporate principles of habit formation, small improvements, and clear explanations of scientific concepts. Focus on actionable insights and behavioral change.`,
  
  'shane-parrish': `Write in the style of Shane Parrish: focus on mental models, practical wisdom, and interdisciplinary thinking. Use clear explanations of complex concepts, emphasize timeless principles rather than news, and connect ideas across different domains. Demonstrate thoughtful analysis that reveals the reality behind surface appearances.`,
  
  'mark-manson': `Write in the style of Mark Manson: brutally honest, contrarian, and conversational. Use occasional profanity for emphasis, challenge conventional self-help wisdom, and focus on accepting uncomfortable truths. Balance cynicism with constructive advice, and use humor to discuss serious topics.`,
  
  'david-perell': `Write in the style of David Perell: focus on idea curation and connecting disparate concepts. Write with clarity and enthusiasm about writing, learning, and knowledge work. Use storytelling to illustrate points, reference a broad range of sources across disciplines, and emphasize the importance of sharing ideas in public.`
};

export async function generateContent(prompt: string, style: WritingStyle): Promise<GeneratedContent> {
  try {
    // In a real implementation, this would call an API
    // For this prototype, we'll simulate the API call
    
    const systemPrompt = STYLE_PROMPTS[style];
    const fullPrompt = `${systemPrompt}\n\nUser request: ${prompt}`;
    
    // Simulated API call
    console.log('Generating content with prompt:', fullPrompt);
    
    // In a real implementation, this would be the response from an LLM API
    const generatedText = await simulateApiCall(fullPrompt);
    
    return {
      id: generateId(),
      timestamp: new Date().toISOString(),
      prompt,
      style,
      content: generatedText
    };
  } catch (error) {
    console.error('Error generating content:', error);
    throw new Error('Failed to generate content. Please try again.');
  }
}

// Helper functions
function generateId(): string {
  return Math.random().toString(36).substring(2, 15);
}

async function simulateApiCall(prompt: string): Promise<string> {
  // In a real implementation, this would call an LLM API
  // For the prototype, we'll return placeholder text
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(`This is a placeholder for generated content based on the selected writing style. In the actual implementation, this would be text generated by an LLM API using the prompt: "${prompt.substring(0, 50)}..."`);
    }, 1500);
  });
}